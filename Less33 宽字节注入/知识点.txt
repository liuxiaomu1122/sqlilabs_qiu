宽字节注入基础：
两种编码方式：GBK和ASCII
GBK用两字节表示一个字符
ASCII用一个字节表示一个字符
PHP中编码为GBK，函数执行添加的是ASCII编码，Mysql默认字符集是GBK等宽字节字符集（因此存在宽字节注入）

%DF‘：会被PHP当中的addslashes函数转义为“%DF\'”，"\"即URL中的"%5C",也就是说"%DF'"会被转成"%DF%5C%27"。倘若网站的字符集是GBK，Mysql使用的编码也是GBK的话，就会认为"%DF%5C%27"是一个宽字符。

addalashes()函数:返回在预定义字符之前添加反斜杠的字符串
预定义字符是：单引号、双引号、反斜杠、NULL
如id=1' or '1' ='1，单引号本来用于比和语句，addalashes()函数会自动转义这些闭合的单引号，在这些单引号前加上转义符\，变为id=1\' or \'1\' = \'1，如此在SQL查询中仍然是一个普通的字符串，不能进行注入。
而网站在过滤'的时候，通常思路就是将'转换为\'，因此需要想办法将'前面添加的\去掉，一般有两种思路：
1.%DF连带\
如果程序的默认字符集是GBK等宽字节字符集，就有可能产生宽字节注入，绕过上述过滤。
若在PHP中使用mysql_query("set name gbk")将默认字符集设置为GBK，而使用addslashes()转义用户输入，此时如果用户输入%DF%27（%DF'），则addslashes()会在%27前面加上一个%5C字符（\）
而Mysql在使用GBK编码时，会认为两个字符为一个汉字，也就是说%DF%5C为一个宽字符（前一个ASCII大于128才能到汉字的范围），也就是 縗'，也就是说%DF%5C%27=縗' ，这样单引号就未被转义，能闭合语句，从而产生SQL注入。%DF不是唯一一个可以产生宽字节注入的字符，理论上%81-%FE均可。
2.过滤\'中的\
构造%DF%5C%5C%27，addslashes()会在两个%5C和%27之前都加上\即%5C，变为%DF %5c%5c %5c%5c %5c%27
但宽字符集认为%DF%5c是一个字符即縗，则%DF%5c %5c%5c %5c%5c %27即 縗\\\\' ，四个\正好转义为两个\，即'未被转义
